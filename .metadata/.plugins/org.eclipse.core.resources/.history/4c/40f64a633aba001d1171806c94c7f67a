
public class Solution {
	// 棋盘状态空间
	private boolean[][] board;
	
	// 记录每一行放置皇后的下标, 用于构造具体解, 如果只需要求解的个数, 可以不需要queens数组
	// private int[] queens;
	
	// 记录每一次搜索时，对列、主对角线、副对角线的占用情况
	private boolean[] col;
	private boolean[] mainDiag;
	private boolean[] viceDiag;
	
	// 解的个数
	private int count;
	
	public int totalNQueens(int n) {
		// 初始化
		count = 0;
		//queens = new int[n];
		col = new boolean[n];
		mainDiag = new boolean[2n-1];
		viceDiag = new boolean[2n-1];
		
		backtrack(0, n);
		
		return count;
    }
	
	private void backtrack(int row, int n) {
		if(row == n) {
			// 已经找到一个可行解，返回
			this.count++;
		}
		
		// 从当前行(row)的每一列开始搜索
		for(int col = 0; col < n; col++) {
			// 当前列已被占用
			
			// 当前主对角线被占用
			// 当前副对角线已被占用
			
		}
		
	}
}
